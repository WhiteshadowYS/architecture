/* groovylint-disable NoDef, UnusedVariable, VariableTypeRequired */
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "com.whiteshadow.architecture"
        minSdkVersion 23
        targetSdkVersion 33
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // Need for "Get Version package"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "app"
    productFlavors {
        production {
            dimension "app"
            applicationId "com.whiteshadow.architecture"
            resValue "string", "app_name", "BaseApp"
        }
        staging {
            dimension "app"
            applicationId "com.whiteshadow.architecture.stage"
            resValue "string", "app_name", "BaseApp Staging"
        }
        develop {
            dimension "app"
            applicationId "com.whiteshadow.architecture.dev"
            resValue "string", "app_name", "BaseApp Develop"
        }
    }
    
    applicationVariants.all { variant ->
    variant.outputs.all { output ->
        def versionName = variant.versionName
        def versionCode = variant.versionCode // e.g 1.0
        def flavorName = variant.flavorName // e. g. Free
        def buildType = variant.buildType.name // e. g. debug

        outputFileName = "pharmatrail-${buildType}-${flavorName}-${versionName}+${versionCode}.apk"
    }
}
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:2.0.1'

    /// Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.0')
    /// Add the dependency for the Firebase SDK for Google Analytics
    /// When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-messaging'
}